import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.36c93c4c.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/代码随想录/二叉树.md","filePath":"pages/Earnings/代码随想录/二叉树.md"}'),p={name:"pages/Earnings/代码随想录/二叉树.md"},o=l(`<h2 id="层序" tabindex="-1">层序 <a class="header-anchor" href="#层序" aria-label="Permalink to &quot;层序&quot;">​</a></h2><h3 id="模板" tabindex="-1">模板 <a class="header-anchor" href="#模板" aria-label="Permalink to &quot;模板&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [root];</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (path.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(n.val)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n.left) path.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(n.left);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n.right) path.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(n.right);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [root];</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (path.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(n.val)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n.left) path.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(n.left);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n.right) path.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(n.right);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="翻转" tabindex="-1">翻转 <a class="header-anchor" href="#翻转" aria-label="Permalink to &quot;翻转&quot;">​</a></h2><h3 id="翻转二叉树" tabindex="-1">翻转二叉树 <a class="header-anchor" href="#翻转二叉树" aria-label="Permalink to &quot;翻转二叉树&quot;">​</a></h3><ol><li>确定递归参数和返回值</li></ol><ul><li>终止条件 当前节点为空 返回 <code>if (!root) return null</code></li></ul><ol start="2"><li>单层递归逻辑</li></ol><ul><li>先交换左右孩子节点，再翻转左子树和右子树</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(root.left, root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">invertTree</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">invertTree</span><span style="color:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invertTree</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(root.left, root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// let tmp = root.left</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// root.left = root.right</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// root.right = tmp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.left) </span><span style="color:#B392F0;">invertTree</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.right) </span><span style="color:#B392F0;">invertTree</span><span style="color:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(root.left, root.right)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">invertTree</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">invertTree</span><span style="color:#24292E;">(root.right)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invertTree</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(root.left, root.right)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// let tmp = root.left</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// root.left = root.right</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// root.right = tmp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.left) </span><span style="color:#6F42C1;">invertTree</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.right) </span><span style="color:#6F42C1;">invertTree</span><span style="color:#24292E;">(root.right)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span></code></pre></div><ol start="3"><li>在 swap 函数中，我们尝试交换传递进来的对象，但是在函数内部只是对参数进行了重新赋值。这样做只是改变了函数内部的变量，而并没有改变传递进来的对象本身。</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h3 id="二叉树性质" tabindex="-1">二叉树性质 <a class="header-anchor" href="#二叉树性质" aria-label="Permalink to &quot;二叉树性质&quot;">​</a></h3><ul><li>完全二叉树 从左到右填充 不能有右节点没有左节点</li><li>满二叉树</li><li>搜索二叉树 左子树都比根节点小 右子树都比根节点大</li></ul><h3 id="递归遍历" tabindex="-1">递归遍历 <a class="header-anchor" href="#递归遍历" aria-label="Permalink to &quot;递归遍历&quot;">​</a></h3><ul><li>前序 root left right</li><li>中序 left root right</li><li>后序 left right root</li></ul><h3 id="迭代" tabindex="-1">迭代 <a class="header-anchor" href="#迭代" aria-label="Permalink to &quot;迭代&quot;">​</a></h3><h3 id="层序-1" tabindex="-1">层序 <a class="header-anchor" href="#层序-1" aria-label="Permalink to &quot;层序&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[root]</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(path.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">path.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(len</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">puhs</span><span style="color:#E1E4E8;">(n.val)</span></span>
<span class="line"><span style="color:#E1E4E8;">    path.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(n.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">    path.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(n.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[root]</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(path.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">path.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(len</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">puhs</span><span style="color:#24292E;">(n.val)</span></span>
<span class="line"><span style="color:#24292E;">    path.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(n.left)</span></span>
<span class="line"><span style="color:#24292E;">    path.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(n.right)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="翻转-递归" tabindex="-1">翻转 递归 <a class="header-anchor" href="#翻转-递归" aria-label="Permalink to &quot;翻转 递归&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">revser</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> temp</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root.left</span></span>
<span class="line"><span style="color:#E1E4E8;">    root.left</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">revser</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">    root.rgiht</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">revser</span><span style="color:#E1E4E8;">(temp)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">revser</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> temp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root.left</span></span>
<span class="line"><span style="color:#24292E;">    root.left</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">revser</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#24292E;">    root.rgiht</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">revser</span><span style="color:#24292E;">(temp)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="构造二叉树-中序-后序-中序-先序-构造最大二叉树654" tabindex="-1">构造二叉树： 中序+后序 中序+先序 构造最大二叉树654 <a class="header-anchor" href="#构造二叉树-中序-后序-中序-先序-构造最大二叉树654" aria-label="Permalink to &quot;构造二叉树： 中序+后序 中序+先序 构造最大二叉树654&quot;">​</a></h3><p><strong>注意终止条件</strong> 找到索引直接递归就可以，注意终止条件是前序或者后序为空了，就返回null</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//注意终止条件</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nodeval</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">nums.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//可能是最大值最小值 或者先序和后序遍历</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nums.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(nodeval)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> root</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(nodeval)</span></span>
<span class="line"><span style="color:#E1E4E8;">root.left</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(nums.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,index),nums.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">root.right </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//直接套公式就完了 按索引划分剩余的区间</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//注意终止条件</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nodeval</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">nums.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//可能是最大值最小值 或者先序和后序遍历</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(nodeval)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> root</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(nodeval)</span></span>
<span class="line"><span style="color:#24292E;">root.left</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(nums.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,index),nums.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">root.right </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//直接套公式就完了 按索引划分剩余的区间</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span></code></pre></div><h3 id="二叉树的回溯" tabindex="-1">二叉树的回溯 <a class="header-anchor" href="#二叉树的回溯" aria-label="Permalink to &quot;二叉树的回溯&quot;">​</a></h3><pre><code>左叶子之和 找树左下角的值 路径总和
</code></pre><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//隐藏的回溯</span></span>
<span class="line"><span style="color:#E1E4E8;">sum</span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;">node.val</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left,sum)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(roo.right,sum)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//路径总和</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sum</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.left </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.right </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.left </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.right) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.left) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//回溯</span></span>
<span class="line"><span style="color:#E1E4E8;">        sum </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> root.left.val </span><span style="color:#6A737D;">//做选择</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left, sum)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//找到对应路径就直接返回了</span></span>
<span class="line"><span style="color:#E1E4E8;">        sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> root.left.val </span><span style="color:#6A737D;">//撤销选择</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.right) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        sum </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> root.right.val</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right, sum)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> root.right.val</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root, targetSum</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">root.val)s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//隐藏的回溯</span></span>
<span class="line"><span style="color:#24292E;">sum</span><span style="color:#D73A49;">+=</span><span style="color:#24292E;">node.val</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left,sum)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(root.right)</span></span>
<span class="line"><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(roo.right,sum)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//路径总和</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sum</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.left) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//回溯</span></span>
<span class="line"><span style="color:#24292E;">        sum </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> root.left.val </span><span style="color:#6A737D;">//做选择</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left, sum)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//找到对应路径就直接返回了</span></span>
<span class="line"><span style="color:#24292E;">        sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> root.left.val </span><span style="color:#6A737D;">//撤销选择</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.right) {</span></span>
<span class="line"><span style="color:#24292E;">        sum </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> root.right.val</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right, sum)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> root.right.val</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root, targetSum</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">root.val)s</span></span></code></pre></div><h3 id="到底有没有返回值" tabindex="-1">到底有没有返回值 <a class="header-anchor" href="#到底有没有返回值" aria-label="Permalink to &quot;到底有没有返回值&quot;">​</a></h3><pre><code> * 需要搜索整颗二叉树且不用递归处理返回值，就不要返回值 113路径总和ii
 * 需要搜索返回值且需要处理递归返回值，需要返回值 236二叉树的最近公共祖先
 * S需要搜索其中一条符合条件的路径，递归一定需要返回值，因为找到了就要及时返回 路径总和
</code></pre>`,29),e=[o];function t(r,c,E,y,i,h){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
