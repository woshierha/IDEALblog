import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.f16e6129.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/代码随想录/二叉树后序.md","filePath":"pages/Earnings/代码随想录/二叉树后序.md"}'),p={name:"pages/Earnings/代码随想录/二叉树后序.md"},o=l(`<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 根节点的深度为1，打印出这些节点各自的深度</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lv</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(root.val, lv)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left, lv </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right, lv </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//根节点初始深度为1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//打印出左右子树各有多少个节点</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> leftcount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rightcount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> leftcount </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> rightcount </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(root.val, node, leftcount, rightcount)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   value: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   left: {</span></span>
<span class="line"><span style="color:#E1E4E8;">       value: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       right: {</span></span>
<span class="line"><span style="color:#E1E4E8;">           value: </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">   right: {</span></span>
<span class="line"><span style="color:#E1E4E8;">       value: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">binaryTreePaths</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.left </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> root.right </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           path </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> root.value</span></span>
<span class="line"><span style="color:#E1E4E8;">           res.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(path)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       path </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> root.value </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&gt;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left, path)</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right, path)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#B392F0;">binaryTreePaths</span><span style="color:#E1E4E8;">(root)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 根节点的深度为1，打印出这些节点各自的深度</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lv</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(root.val, lv)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left, lv </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right, lv </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//根节点初始深度为1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//打印出左右子树各有多少个节点</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> leftcount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rightcount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> leftcount </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> rightcount </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(root.val, node, leftcount, rightcount)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   value: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   left: {</span></span>
<span class="line"><span style="color:#24292E;">       value: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       right: {</span></span>
<span class="line"><span style="color:#24292E;">           value: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">   right: {</span></span>
<span class="line"><span style="color:#24292E;">       value: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">binaryTreePaths</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">path</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> root.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           path </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> root.value</span></span>
<span class="line"><span style="color:#24292E;">           res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(path)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       path </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> root.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&gt;&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left, path)</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right, path)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6F42C1;">binaryTreePaths</span><span style="color:#24292E;">(root)</span></span></code></pre></div><h2 id="_1、如果把根节点看做第-1-层-如何打印出每一个节点所在的层数" tabindex="-1">1、如果把根节点看做第 1 层，如何打印出每一个节点所在的层数？ <a class="header-anchor" href="#_1、如果把根节点看做第-1-层-如何打印出每一个节点所在的层数" aria-label="Permalink to &quot;1、如果把根节点看做第 1 层，如何打印出每一个节点所在的层数？&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lv</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(root.val, lv)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left, lv </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right, lv </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//根节点初始深度为1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lv</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(root.val, lv)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left, lv </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right, lv </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//根节点初始深度为1</span></span></code></pre></div><h2 id="_2、如何打印出每个节点的左右子树各有多少节点" tabindex="-1">2、如何打印出每个节点的左右子树各有多少节点？ <a class="header-anchor" href="#_2、如何打印出每个节点的左右子树各有多少节点" aria-label="Permalink to &quot;2、如何打印出每个节点的左右子树各有多少节点？&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(root</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> leftcount</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rightcounr</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> totalcount</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">leftcount</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">right</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> totalcount</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(root</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> leftcount</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rightcounr</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> totalcount</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">leftcount</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">right</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> totalcount</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_3-二叉树对称" tabindex="-1">3.二叉树对称 <a class="header-anchor" href="#_3-二叉树对称" aria-label="Permalink to &quot;3.二叉树对称&quot;">​</a></h2><ol><li>都有的情况下在讨论，外层相等内层相等(左子树的左节点 ，右子树的右节点)(左子树的右节点，右子树的左节点)</li><li>分情况讨论，如果节点都为空就是对称，一个有一个没有就肯定不对称。 如果两个都有但是值不相等也不对称，如果两个都有的情况下就要看内层外层是不是都相等 <code> 内层 isSame(left.right, right.left)</code><code> 外层 isSame(left.left, right.right)</code></li><li>栈括号匹配</li></ol><ul><li>判断root</li><li>创建一个栈or队列 加入左子树，加入右子树</li><li>各自pop出一个相比较，都没有就跳过，一个有一个没有，或者值不相等都是false</li><li>stack.push() 加入左节点左子树，右节点右子树 [外部]</li><li>左节点右子树，右节点左子树 [内部]</li></ul><h2 id="扩展-另一个树的子树-100-572" tabindex="-1">扩展 另一个树的子树 100 572 <a class="header-anchor" href="#扩展-另一个树的子树-100-572" aria-label="Permalink to &quot;扩展  另一个树的子树 100 572&quot;">​</a></h2><ol><li>子树可能是这个树本身，或者是他左右子树的子树</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">issubTree</span><span style="color:#E1E4E8;">(root,subRoot)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">issubTree</span><span style="color:#E1E4E8;">(root.left,subRoot)</span><span style="color:#F97583;">||</span><span style="color:#B392F0;">issubTree</span><span style="color:#E1E4E8;">(root.right,subRoot) )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">issubTree</span><span style="color:#24292E;">(root,subRoot)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">issubTree</span><span style="color:#24292E;">(root.left,subRoot)</span><span style="color:#D73A49;">||</span><span style="color:#6F42C1;">issubTree</span><span style="color:#24292E;">(root.right,subRoot) )</span></span></code></pre></div><ol start="2"><li>复用之前判断是不同一棵树，对称一样的函数isSameTree</li></ol><h2 id="_2叉树的最大深度" tabindex="-1">2叉树的最大深度 <a class="header-anchor" href="#_2叉树的最大深度" aria-label="Permalink to &quot;2叉树的最大深度&quot;">​</a></h2><ol><li>左右的深度中取最大的再加+1就是根节点的最大深度</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(root</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> leftheight</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rightheight</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.rgiht)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> depth</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(leftheight,righrheight)</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> depth</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(root</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> leftheight</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rightheight</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.rgiht)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> depth</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(leftheight,righrheight)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> depth</span></span></code></pre></div><ol start="2"><li>直接用层序遍历 记录每一层也可以</li></ol><h2 id="_2叉树的最小深度" tabindex="-1">2叉树的最小深度 <a class="header-anchor" href="#_2叉树的最小深度" aria-label="Permalink to &quot;2叉树的最小深度&quot;">​</a></h2><ol><li>左右孩子都为空的才能是叶子节点</li><li>左子树为空右不为空 (与最大深度不同的情况)</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> right</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">getdepth</span><span style="color:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(root.left</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">null</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">root.right</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rightheight </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> right</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">getdepth</span><span style="color:#24292E;">(root.right)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(root.left</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">null</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">root.right</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rightheight </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span></code></pre></div><h2 id="二叉树有多少个节点" tabindex="-1">二叉树有多少个节点 <a class="header-anchor" href="#二叉树有多少个节点" aria-label="Permalink to &quot;二叉树有多少个节点&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> leftcount</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rightcount</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">leftcount</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">rightcount</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> leftcount</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rightcount</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">leftcount</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">rightcount</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span></code></pre></div><h2 id="平衡二叉树" tabindex="-1">平衡二叉树 <a class="header-anchor" href="#平衡二叉树" aria-label="Permalink to &quot;平衡二叉树&quot;">​</a></h2><ol><li>左右的高度差不超过1</li><li>深度和高度区别</li></ol><ul><li>二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数。</li><li>二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数。</li></ul><ol start="3"><li>左右任由一个返回-1就是不符合了</li><li>如果不是-1 那就证明他的深度是左右最大的再加上1</li></ol><blockquote><p>递归： 确定递归参数和返回值 确定终止条件 确定单层的递归逻辑</p></blockquote><h2 id="找到所有路径" tabindex="-1">找到所有路径 <a class="header-anchor" href="#找到所有路径" aria-label="Permalink to &quot;找到所有路径&quot;">​</a></h2><ol><li>回溯思想</li><li>简单写法省去了pop</li><li>实际上是会用到的</li></ol>`,28),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
