import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.464c1bfb.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/代码随想录/二叉树周末.md","filePath":"pages/Earnings/代码随想录/二叉树周末.md"}'),o={name:"pages/Earnings/代码随想录/二叉树周末.md"},p=l(`<h2 id="合并二叉树" tabindex="-1">合并二叉树 <a class="header-anchor" href="#合并二叉树" aria-label="Permalink to &quot;合并二叉树&quot;">​</a></h2><p>在一棵树上修改，一起遍历两棵树</p><ul><li>递归</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root1</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">root2</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root1) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root2</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root2) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(root1</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">root2) root1.val</span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;">root2.val</span></span>
<span class="line"><span style="color:#E1E4E8;">      root1.left</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root1.left,root2.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">      root1.right</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root1.right,root2.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root1</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root1</span><span style="color:#24292E;">,</span><span style="color:#E36209;">root2</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root1) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root2</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root2) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(root1</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">root2) root1.val</span><span style="color:#D73A49;">+=</span><span style="color:#24292E;">root2.val</span></span>
<span class="line"><span style="color:#24292E;">      root1.left</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root1.left,root2.left)</span></span>
<span class="line"><span style="color:#24292E;">      root1.right</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root1.right,root2.right)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root1</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><ul><li>层序 两棵树一起遍历，然后在root1基础上修改</li></ul><h2 id="二叉搜索树中的搜索" tabindex="-1">二叉搜索树中的搜索 <a class="header-anchor" href="#二叉搜索树中的搜索" aria-label="Permalink to &quot;二叉搜索树中的搜索&quot;">​</a></h2><ul><li>搜索树特性: 中序的话就是左中右就是按顺序排列的</li></ul><h2 id="验证搜索二叉树" tabindex="-1">验证搜索二叉树 <a class="header-anchor" href="#验证搜索二叉树" aria-label="Permalink to &quot;验证搜索二叉树&quot;">​</a></h2><ul><li>直接转换为数组做</li><li>一次遍历保存之前的节点</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(node</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    node.val</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">root.val</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">node</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#6A737D;">//递归</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ture;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//中序是有序的</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> (root.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//如果是这个节点没有上一个节点大 就证明不符合有序的</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.val </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> maxval) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//记录下当前的节点</span></span>
<span class="line"><span style="color:#E1E4E8;">   maxval </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root.val</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> (root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> right </span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(node</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    node.val</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">root.val</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">node</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#6A737D;">//递归</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ture;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//中序是有序的</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> (root.left)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//如果是这个节点没有上一个节点大 就证明不符合有序的</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.val </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> maxval) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//记录下当前的节点</span></span>
<span class="line"><span style="color:#24292E;">   maxval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.val</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> (root.right)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> right </span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="二叉树的最小绝对值差" tabindex="-1">二叉树的最小绝对值差 <a class="header-anchor" href="#二叉树的最小绝对值差" aria-label="Permalink to &quot;二叉树的最小绝对值差&quot;">​</a></h2><ul><li>有序数组上求最小值</li></ul><h2 id="二叉树的众树数" tabindex="-1">二叉树的众树数 <a class="header-anchor" href="#二叉树的众树数" aria-label="Permalink to &quot;二叉树的众树数&quot;">​</a></h2><ul><li>注意数组要清零 遍历一遍求集合</li></ul><h2 id="公共祖先" tabindex="-1">公共祖先 <a class="header-anchor" href="#公共祖先" aria-label="Permalink to &quot;公共祖先&quot;">​</a></h2><blockquote><p>这两个节点是在 这个树上的 所以不用确定在不在</p></blockquote><ul><li>找到了任意一个就返回</li><li>左子树上找 右子树上找</li><li>左右上有 返回根节点</li><li>左边没有返回右边 右边没有返回左边</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> q){</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.left, p ,q)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(root.right, p, q)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 左右节点都能找到</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (left </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> right </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//左边没找到 在右边</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">left) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> right;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//右边没找到 在左边</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">right) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> left;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> q){</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.left, p ,q)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(root.right, p, q)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 左右节点都能找到</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//左边没找到 在右边</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">left) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> right;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//右边没找到 在左边</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">right) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> left;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><h2 id="_235-搜索二叉树的最近祖先" tabindex="-1">235 搜索二叉树的最近祖先 <a class="header-anchor" href="#_235-搜索二叉树的最近祖先" aria-label="Permalink to &quot;235 搜索二叉树的最近祖先&quot;">​</a></h2><ol><li>肯定是在这个树上的</li><li>根据搜索树特性，q &lt; root.val &lt; p 就是最近祖先</li><li>当这个点比两个值都都大 就要在左子树上找</li><li>当着个点的值比两个值都小，就要在右子树上找</li></ol><h2 id="插入二叉搜索树" tabindex="-1">插入二叉搜索树 <a class="header-anchor" href="#插入二叉搜索树" aria-label="Permalink to &quot;插入二叉搜索树&quot;">​</a></h2><ul><li>遇到空节点插入就可以了</li><li>新创建的node有返回值 需要把他接住</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> (root.left, val)</span></span>
<span class="line"><span style="color:#E1E4E8;"> roor.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> (root.right, val)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> (root.left, val)</span></span>
<span class="line"><span style="color:#24292E;"> roor.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> (root.right, val)</span></span></code></pre></div><h2 id="删除搜索二叉树" tabindex="-1">删除搜索二叉树 <a class="header-anchor" href="#删除搜索二叉树" aria-label="Permalink to &quot;删除搜索二叉树&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.val </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.left </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.right) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.left) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root.right;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.right) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root.left;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root.left;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//左子树的最右节点</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (left.right) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> left.right</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//把删除节点替换成这个</span></span>
<span class="line"><span style="color:#E1E4E8;">   root.val  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> left.val;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//左子树上把这个替换的节点删掉</span></span>
<span class="line"><span style="color:#E1E4E8;">   root.left </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">deleteNode</span><span style="color:#E1E4E8;">(root.left, left.val)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//左子树上找</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.val </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteNode</span><span style="color:#E1E4E8;">(root.left, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//右子树上找</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.val </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  root.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">deleteNode</span><span style="color:#E1E4E8;">(root.right, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.val </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root.right;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root.left;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.left;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//左子树的最右节点</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (left.right) {</span></span>
<span class="line"><span style="color:#24292E;">       left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> left.right</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//把删除节点替换成这个</span></span>
<span class="line"><span style="color:#24292E;">   root.val  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> left.val;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//左子树上把这个替换的节点删掉</span></span>
<span class="line"><span style="color:#24292E;">   root.left </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.left, left.val)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//左子树上找</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.val </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">   root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.left, key)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//右子树上找</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.val </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">  root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.right, key)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="修剪二叉搜索树" tabindex="-1">修剪二叉搜索树 <a class="header-anchor" href="#修剪二叉搜索树" aria-label="Permalink to &quot;修剪二叉搜索树&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//给定区间[low, high]</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (roo.val </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> low) </span><span style="color:#6A737D;">//说明只能在右子树上找 左边的只会更小</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">(root.right, val)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.val </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> high) </span><span style="color:#6A737D;">//说明只能在左子树上找 右边的只会大</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">(root.left, val)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//如果在两个区间之间的</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//要递归看看左右子树有没有需要修建的</span></span>
<span class="line"><span style="color:#E1E4E8;"> root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">(root.left, low, high)</span></span>
<span class="line"><span style="color:#E1E4E8;"> root.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">(root.right, low, high)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//给定区间[low, high]</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (roo.val </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> low) </span><span style="color:#6A737D;">//说明只能在右子树上找 左边的只会更小</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(root.right, val)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.val </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> high) </span><span style="color:#6A737D;">//说明只能在左子树上找 右边的只会大</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(root.left, val)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//如果在两个区间之间的</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//要递归看看左右子树有没有需要修建的</span></span>
<span class="line"><span style="color:#24292E;"> root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(root.left, low, high)</span></span>
<span class="line"><span style="color:#24292E;"> root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(root.right, low, high)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span></code></pre></div><h2 id="构造平衡搜索二叉树" tabindex="-1">构造平衡搜索二叉树 <a class="header-anchor" href="#构造平衡搜索二叉树" aria-label="Permalink to &quot;构造平衡搜索二叉树&quot;">​</a></h2><pre><code> 构造常规操作 切割数字然后递归
\`\`\`javascript
  len left = 0;
  let right = nums.length - 1;
  let index = left + (right - left) &gt; 1
  //越界 
  if (left &gt; right) return null
  let root = new TreeNode(nums[index])
  root.left = buildTree(nums.slice(0, index))
  root.right = buildTree(nums.slice(index+1, len))
  return root
\`\`\`
</code></pre><h2 id="构造累加树" tabindex="-1">构造累加树 <a class="header-anchor" href="#构造累加树" aria-label="Permalink to &quot;构造累加树&quot;">​</a></h2><ul><li>右中左 的顺序</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> (root.right)</span></span>
<span class="line"><span style="color:#E1E4E8;">     root.val </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> pre </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> (root.left)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> (root.right)</span></span>
<span class="line"><span style="color:#24292E;">     root.val </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> pre </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> (root.left)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span></code></pre></div>`,32),e=[p];function t(r,c,E,y,i,d){return n(),a("div",null,e)}const f=s(o,[["render",t]]);export{F as __pageData,f as default};
