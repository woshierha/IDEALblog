import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.36c93c4c.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/代码随想录/动态规划.md","filePath":"pages/Earnings/代码随想录/动态规划.md"}'),p={name:"pages/Earnings/代码随想录/动态规划.md"},o=l(`<h2 id="_1-week" tabindex="-1">1 week <a class="header-anchor" href="#_1-week" aria-label="Permalink to &quot;1 week&quot;">​</a></h2><h3 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h3><ol><li>确定dp数组和下标含义</li><li>确定递推公式</li><li>初始化数组</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><h3 id="斐波那契数" tabindex="-1">斐波那契数 <a class="header-anchor" href="#斐波那契数" aria-label="Permalink to &quot;斐波那契数&quot;">​</a></h3><ul><li>后面每一项数字都是 前两项之和</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//基本思路</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dp</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[i]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//降低空间复杂度</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> temp</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">temp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//基本思路</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">dp[i]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//降低空间复杂度</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> temp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">temp</span></span></code></pre></div><h3 id="爬楼梯" tabindex="-1">爬楼梯 <a class="header-anchor" href="#爬楼梯" aria-label="Permalink to &quot;爬楼梯&quot;">​</a></h3><ul><li>一次可以爬一阶或者两阶</li><li>初始化问题 不用考虑0直接初始化 dp[1] dp[2] 然后啊从3开始遍历</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> dp[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//两种爬法</span></span>
<span class="line"><span style="color:#E1E4E8;"> dp[i]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">//上i-1层楼梯有dp[i-1]种方法（再跳一步就到头） 上i-2层 有dp[i-2]种方法 （再一次性走两步）</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//节省空间法</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> dp[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dp[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sum</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> dp[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//两种爬法</span></span>
<span class="line"><span style="color:#24292E;"> dp[i]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">//上i-1层楼梯有dp[i-1]种方法（再跳一步就到头） 上i-2层 有dp[i-2]种方法 （再一次性走两步）</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//节省空间法</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dp[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dp[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sum</span></span></code></pre></div><h3 id="最小花费爬楼梯" tabindex="-1">最小花费爬楼梯 <a class="header-anchor" href="#最小花费爬楼梯" aria-label="Permalink to &quot;最小花费爬楼梯&quot;">​</a></h3><ul><li>第一步不费体力或者最后一步不费体力</li><li>选择爬一个台阶还是两个台阶 选一个最小的</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[i]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">cost[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">cost[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dp[cost.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">dp[i]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">cost[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">cost[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dp[cost.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">]</span></span></code></pre></div><h3 id="不同路径i-ii" tabindex="-1">不同路径i &amp; ii <a class="header-anchor" href="#不同路径i-ii" aria-label="Permalink to &quot;不同路径i &amp; ii&quot;">​</a></h3><ol><li>只能往下走或者往右走，初始化dp数组</li><li>注意 障碍物的情况，除了当前有障碍物还要判断之前有没有经过障碍物</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nums[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]){</span></span>
<span class="line"><span style="color:#E1E4E8;">       dp[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       dp[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nums[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">       dp[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       dp[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><h2 id="背包周01" tabindex="-1">背包周01 <a class="header-anchor" href="#背包周01" aria-label="Permalink to &quot;背包周01&quot;">​</a></h2><h3 id="_01背包" tabindex="-1">01背包 <a class="header-anchor" href="#_01背包" aria-label="Permalink to &quot;01背包&quot;">​</a></h3><p>先物品再背包 背包从大到小</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j],dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">weight[i]]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">value[i]) </span><span style="color:#6A737D;">//要么不选 要么选 </span></span>
<span class="line"><span style="color:#6A737D;">//剩余的背包容量价值 + 现在拿的这个物品的重量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j],dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">weight[i]]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">value[i]) </span><span style="color:#6A737D;">//要么不选 要么选 </span></span>
<span class="line"><span style="color:#6A737D;">//剩余的背包容量价值 + 现在拿的这个物品的重量</span></span></code></pre></div><h3 id="目标和" tabindex="-1">目标和 <a class="header-anchor" href="#目标和" aria-label="Permalink to &quot;目标和&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nums</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">加法总和：x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">减法总和：sum </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nums</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">加法总和：x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">减法总和：sum </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div><ul><li>加法总和为X 减法总和就是sum-X 因为要把所有的数字用完 把他们都串联起来 所以要么就拿去做加法 要么就拿去做减法了</li><li>X - （sum - X）= S</li><li>X = (S + sum)/2</li><li>装满容量为X的背包 有dp[X]种方法/二维数组：其实也可以使用二维dp数组来求解本题，dp[i][j]：使用 下标为[0, i]的nums[i]能够凑满j（包括j）这么大容量的包，有dp[i][j]种方法。 不考虑nums[i]的情况下，填满容量为j - nums[i]的背包，有dp[j - nums[i]]种方法。 那么只要搞到nums[i]的话，凑成dp[j]就有dp[j - nums[i]] 种方法。 例如：dp[j]，j 为5， 已经有一个1（nums[i]） 的话，有 dp[4]种方法 凑成 dp[5]。 已经有一个2（nums[i]） 的话，有 dp[3]种方法 凑成 dp[5]。 已经有一个3（nums[i]） 的话，有 dp[2]中方法 凑成 dp[5] 已经有一个4（nums[i]） 的话，有 dp[1]中方法 凑成 dp[5] 已经有一个5 （nums[i]）的话，有 dp[0]中方法 凑成 dp[5] dp[j] += dp[j - nums[i]];//将所有方法累加起来 就是最终的方法数量</li></ul><ol><li><p>分割等和子集 dp[j]表示 背包总容量是j，最大可以凑成j的子集总和为dp[j]。 Q: 给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><ul><li>背包的体积为sum/2</li><li>背包中要放入的元素的重量和价值都为i</li><li>背包装满证明找到了</li><li>背包中元素不能重复放入</li></ul></li><li><p>最后一块石头的重量②</p><ul><li>dp[j]表示容量（这里说容量更形象，其实就是重量）为j的背包，最多可以背dp[j]这么重的石头</li><li>分成重量尽量相同的两堆，相撞之后，剩下的石头最小。</li><li>跟上一道题有所不同在于要求剩下的石头是多少</li></ul></li><li><p>目标和 <strong>求装满背包有几种方法类似的题目，递推公式基本都是这样的。</strong></p><ul><li>所以数的总和为 sum ，加法为 x 那么减法就是 sum-x 想要和为 S ,解出加法的x = (S+sum)/2</li><li>填满 j 这么大的背包 有dp[j] 种方法</li><li>dp[j]+=dp[j-nums[i]]</li></ul></li><li><p>一和零</p><ul><li>0和1作为外层物品 一层循环</li><li>背包是二维背包 要装两个物品</li><li>dp[i][j]=Math.max(dp[i][j],dp[i-zero][j-one]+1)</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//遍历物品</span></span>
<span class="line"><span style="color:#E1E4E8;">  for （</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> strs） {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//计算这个物品的0和1的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;">  item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">) zero</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> one</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//遍历背包</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m; i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> zero; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m; j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> one; j</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//减掉前一个物品的 0 和 1 的数量加上现在这个1 增加的子集</span></span>
<span class="line"><span style="color:#E1E4E8;">        dp[i][j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i][j], dp[i</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zero][j</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">one] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//遍历物品</span></span>
<span class="line"><span style="color:#24292E;">  for （</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> strs） {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//计算这个物品的0和1的数量</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">of</span><span style="color:#24292E;">  item) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">) zero</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> one</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//遍历背包</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> zero; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m; j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> one; j</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//减掉前一个物品的 0 和 1 的数量加上现在这个1 增加的子集</span></span>
<span class="line"><span style="color:#24292E;">        dp[i][j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i][j], dp[i</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zero][j</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">one] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div></li></ol><h2 id="背包周3" tabindex="-1">背包周3 <a class="header-anchor" href="#背包周3" aria-label="Permalink to &quot;背包周3&quot;">​</a></h2><h3 id="组合总和" tabindex="-1">组合总和 <a class="header-anchor" href="#组合总和" aria-label="Permalink to &quot;组合总和&quot;">​</a></h3><ol><li>求排列数 完全背包 =》 先背包再物品 背包物品都从前往后</li><li>注意有减法的要判断一下 不然成负数了。</li></ol><h3 id="爬楼梯-n种台阶" tabindex="-1">爬楼梯 （n种台阶） <a class="header-anchor" href="#爬楼梯-n种台阶" aria-label="Permalink to &quot;爬楼梯 （n种台阶）&quot;">​</a></h3><ol><li>完全背包 求排列数 =》先背包后物品 从前往后</li></ol><h3 id="零钱兑换" tabindex="-1">零钱兑换 <a class="header-anchor" href="#零钱兑换" aria-label="Permalink to &quot;零钱兑换&quot;">​</a></h3><ol><li>完全背包 组合数 =》顺序不限 从前到后</li><li>初始化的时候要用Infinity才行 因为是求最小，不然就体现不出没有凑满的情况</li><li><code>dp[j]=Math.min(dp[j],dp[j-coins[i]]+1) // dp表示凑到j所需要的最少的硬币数量 所以可以选择需不要要这个硬币，减去这个硬币之后最少的情况加上这个和直不用这个营部凑到这个哪个比较小 </code></li></ol><h3 id="完全平方数" tabindex="-1">完全平方数 <a class="header-anchor" href="#完全平方数" aria-label="Permalink to &quot;完全平方数&quot;">​</a></h3><ul><li>完全背包 求组合 =》 物品和背包都是从前往后取 先物品后背包</li></ul><ol><li>dp[j]：和为j的完全平方数的最少数量为dp[j]</li><li><code>dp[j]=Math.min(dp[j],dp[j-i*i]+1)</code>选不选择这个数字，选的话就要在之前的情况下增加一种</li><li><strong>初始化</strong>必须初始化最大值，取0他就默认都取0了，要求最小所以初始化成<strong>Infinity</strong></li></ol><h2 id="编辑距离" tabindex="-1">编辑距离 <a class="header-anchor" href="#编辑距离" aria-label="Permalink to &quot;编辑距离&quot;">​</a></h2><h3 id="判断子序列" tabindex="-1">. 判断子序列 <a class="header-anchor" href="#判断子序列" aria-label="Permalink to &quot;. 判断子序列&quot;">​</a></h3><ul><li>可以用双指针或者贪心</li><li><code>dp[i][j]</code>表示t以i结尾的字符和s以j为结尾的字符相同的序列长度为dp[i][j]</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//如果当前字符相等 ，那么相同字符就需要+1 </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(s[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;">t[j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]){</span></span>
<span class="line"><span style="color:#E1E4E8;">     dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//不相等就缩小范围继续找 ，因为是子序列所以顺序是都会对上的</span></span>
<span class="line"><span style="color:#E1E4E8;">     dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//如果当前字符相等 ，那么相同字符就需要+1 </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(s[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">===</span><span style="color:#24292E;">t[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">     dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;"> }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//不相等就缩小范围继续找 ，因为是子序列所以顺序是都会对上的</span></span>
<span class="line"><span style="color:#24292E;">     dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="不同的子序列" tabindex="-1">不同的子序列 <a class="header-anchor" href="#不同的子序列" aria-label="Permalink to &quot;不同的子序列&quot;">​</a></h3><p>给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//相等的时候 有两种可能 一种是使用当前的字符 或者不使用</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(s[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;">t[j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]){</span></span>
<span class="line"><span style="color:#E1E4E8;">  dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j]</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//相等的时候 有两种可能 一种是使用当前的字符 或者不使用</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(s[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">===</span><span style="color:#24292E;">t[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">  dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j]</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="两个字符串的删除操作" tabindex="-1">两个字符串的删除操作 <a class="header-anchor" href="#两个字符串的删除操作" aria-label="Permalink to &quot;两个字符串的删除操作&quot;">​</a></h3><p>给定两个单词 word1 和 word2，找到使得 word1 和 word2 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//当两个字母相等的时候</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(word1[i]</span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;">word2[j]){</span></span>
<span class="line"><span style="color:#E1E4E8;">   dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//删word1  删Word2 同时删</span></span>
<span class="line"><span style="color:#E1E4E8;">   dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,dp[i][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">i;</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">j;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//当两个字母相等的时候</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(word1[i]</span><span style="color:#D73A49;">===</span><span style="color:#24292E;">word2[j]){</span></span>
<span class="line"><span style="color:#24292E;">   dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//删word1  删Word2 同时删</span></span>
<span class="line"><span style="color:#24292E;">   dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,dp[i][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#24292E;">dp[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">i;</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">j;</span></span></code></pre></div><h3 id="编辑距离-1" tabindex="-1">编辑距离 <a class="header-anchor" href="#编辑距离-1" aria-label="Permalink to &quot;编辑距离&quot;">​</a></h3><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">  dp[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">i;</span></span>
<span class="line"><span style="color:#E1E4E8;">  dp[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">j;</span></span>
<span class="line"><span style="color:#6A737D;">//当相等的时候 不用操作</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(word1[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;">word2[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]){</span></span>
<span class="line"><span style="color:#E1E4E8;">    dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,dp[i][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#24292E;">  dp[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">i;</span></span>
<span class="line"><span style="color:#24292E;">  dp[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">j;</span></span>
<span class="line"><span style="color:#6A737D;">//当相等的时候 不用操作</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(word1[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">===</span><span style="color:#24292E;">word2[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">    dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,dp[i][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="股票问题总结" tabindex="-1">股票问题总结 <a class="header-anchor" href="#股票问题总结" aria-label="Permalink to &quot;股票问题总结&quot;">​</a></h2><h3 id="买股票的最佳时期" tabindex="-1">买股票的最佳时期 <a class="header-anchor" href="#买股票的最佳时期" aria-label="Permalink to &quot;买股票的最佳时期&quot;">​</a></h3><ul><li>只能买一次，用贪心取最大</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//转移方程</span></span>
<span class="line"><span style="color:#6A737D;">//有股票只能买一次 所以买的时候就是-prices[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Mtah.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">prices[i])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//没股票</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[i][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Mtah.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">prices[i])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//转移方程</span></span>
<span class="line"><span style="color:#6A737D;">//有股票只能买一次 所以买的时候就是-prices[i]</span></span>
<span class="line"><span style="color:#24292E;">dp[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Mtah.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">prices[i])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//没股票</span></span>
<span class="line"><span style="color:#24292E;">dp[i][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Mtah.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">prices[i])</span></span></code></pre></div><h3 id="买卖股票的最佳时机ii" tabindex="-1">买卖股票的最佳时机II <a class="header-anchor" href="#买卖股票的最佳时机ii" aria-label="Permalink to &quot;买卖股票的最佳时机II&quot;">​</a></h3><ul><li>贪心 可以买买多次 取累计结果</li><li>对比上一题 由于可以买多次 所以买入的时候要加上上次的利润</li></ul><h3 id="买卖股票的最佳时机-iii" tabindex="-1">买卖股票的最佳时机 III <a class="header-anchor" href="#买卖股票的最佳时机-iii" aria-label="Permalink to &quot;买卖股票的最佳时机 III&quot;">​</a></h3><p><code>dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。</code></p><ul><li>最多只能买两次</li><li>状态讨论： 没有操作、第一次买入、第一次卖出、第二次买入，第二次卖出</li></ul><h2 id="回文子串" tabindex="-1">回文子串 <a class="header-anchor" href="#回文子串" aria-label="Permalink to &quot;回文子串&quot;">​</a></h2><ul><li>！回文是在一个数组里面看的</li></ul><h3 id="最长回文子串" tabindex="-1">最长回文子串 <a class="header-anchor" href="#最长回文子串" aria-label="Permalink to &quot;最长回文子串&quot;">​</a></h3><ol><li>子串是连续的</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//定义：dp[i][j] 表示i，j 之间的字符串是不是回文字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">   dp[i][i]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//单个字符肯定是回文</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//转移方程</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(s[i]</span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;">s[j]){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(j</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">&lt;=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">          dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]){</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//注意 i是从大了的推算过来的 所以遍历顺序是从大到小的</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//j是从i开始到字符串长度结束</span></span>
<span class="line"><span style="color:#E1E4E8;">          dp[i][j]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//如果s[i]和s[j]相等，之间间隔小于等于1，说明他是回文 </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//如果间隔大于1 就要判断</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//长度更新 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(dp[i][j]</span><span style="color:#F97583;">===</span><span style="color:#79B8FF;">true</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">(j</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">max){</span></span>
<span class="line"><span style="color:#E1E4E8;">       max</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">j</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//更新长度</span></span>
<span class="line"><span style="color:#E1E4E8;">       path</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(i,max) </span><span style="color:#6A737D;">//截取当前字符串，连续的</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//定义：dp[i][j] 表示i，j 之间的字符串是不是回文字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#24292E;">   dp[i][i]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//单个字符肯定是回文</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//转移方程</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(s[i]</span><span style="color:#D73A49;">===</span><span style="color:#24292E;">s[j]){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(j</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">          dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//注意 i是从大了的推算过来的 所以遍历顺序是从大到小的</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//j是从i开始到字符串长度结束</span></span>
<span class="line"><span style="color:#24292E;">          dp[i][j]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//如果s[i]和s[j]相等，之间间隔小于等于1，说明他是回文 </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//如果间隔大于1 就要判断</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//长度更新 </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(dp[i][j]</span><span style="color:#D73A49;">===</span><span style="color:#005CC5;">true</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">(j</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">max){</span></span>
<span class="line"><span style="color:#24292E;">       max</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">j</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//更新长度</span></span>
<span class="line"><span style="color:#24292E;">       path</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(i,max) </span><span style="color:#6A737D;">//截取当前字符串，连续的</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span></code></pre></div><h3 id="最长回文子序列" tabindex="-1">最长回文子序列 <a class="header-anchor" href="#最长回文子序列" aria-label="Permalink to &quot;最长回文子序列&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * @lc app=leetcode.cn id=494 lang=javascript</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * [494] 目标和</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @lc code=start</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">nums</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">target</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">//  本题要如何使表达式结果为target，</span></span>
<span class="line"><span style="color:#6A737D;">//  既然为target，那么就一定有 left组合 - right组合 = target。</span></span>
<span class="line"><span style="color:#6A737D;">//  left + right等于sum，而sum是固定的。</span></span>
<span class="line"><span style="color:#6A737D;">//  公式来了， left - (sum - left) = target -&gt; left = (target + sum)/2 。</span></span>
<span class="line"><span style="color:#6A737D;">//  target是固定的，sum是固定的，left就可以求出来。</span></span>
<span class="line"><span style="color:#6A737D;">// const nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];</span></span>
<span class="line"><span style="color:#6A737D;">// const target = 0;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findTargetSumWays</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sum</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sum </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//   return;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nums.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> nums[i] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> nums[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">      path.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(nums[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//   console.log(path);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(target, path, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, sum);</span></span>
<span class="line"><span style="color:#E1E4E8;">      sum </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> nums[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">      path.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  nums.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> item;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  nums.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> sum) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((target </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> sum) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (sum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> target) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dfs</span><span style="color:#E1E4E8;">(total, [], </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// @lc code=end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * @lc app=leetcode.cn id=494 lang=javascript</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * [494] 目标和</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @lc code=start</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">nums</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">target</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">//  本题要如何使表达式结果为target，</span></span>
<span class="line"><span style="color:#6A737D;">//  既然为target，那么就一定有 left组合 - right组合 = target。</span></span>
<span class="line"><span style="color:#6A737D;">//  left + right等于sum，而sum是固定的。</span></span>
<span class="line"><span style="color:#6A737D;">//  公式来了， left - (sum - left) = target -&gt; left = (target + sum)/2 。</span></span>
<span class="line"><span style="color:#6A737D;">//  target是固定的，sum是固定的，left就可以求出来。</span></span>
<span class="line"><span style="color:#6A737D;">// const nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];</span></span>
<span class="line"><span style="color:#6A737D;">// const target = 0;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findTargetSumWays</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">nums</span><span style="color:#24292E;">, </span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">path</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sum</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sum </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> target) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//   return;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nums.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> nums[i] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> target) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> nums[i];</span></span>
<span class="line"><span style="color:#24292E;">      path.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(nums[i]);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//   console.log(path);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(target, path, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, sum);</span></span>
<span class="line"><span style="color:#24292E;">      sum </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> nums[i];</span></span>
<span class="line"><span style="color:#24292E;">      path.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  nums.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  nums.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> sum) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((target </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sum) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (sum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> target) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(total, [], </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// @lc code=end</span></span></code></pre></div><h2 id="完全背包" tabindex="-1">完全背包 <a class="header-anchor" href="#完全背包" aria-label="Permalink to &quot;完全背包&quot;">​</a></h2><h3 id="凑零钱" tabindex="-1">凑零钱 <a class="header-anchor" href="#凑零钱" aria-label="Permalink to &quot;凑零钱&quot;">​</a></h3><pre><code>* 回溯超时
\`\`\`javascript
    * dp[i][j]+=dp[i-1]dp[j-coins[i-1]*k] 
    // i表示 硬币
    // k表示这个硬币用了多少次  j表示背包的容量 k最多不能超过j/coins[i-1]次
    //把硬币所有用的次数加起来就是总共可能的次数
\`\`\`
</code></pre><h2 id="周总结3" tabindex="-1">周总结3 <a class="header-anchor" href="#周总结3" aria-label="Permalink to &quot;周总结3&quot;">​</a></h2><h3 id="背包套路" tabindex="-1">背包套路 <a class="header-anchor" href="#背包套路" aria-label="Permalink to &quot;背包套路&quot;">​</a></h3><ol><li>求组合先遍历物品</li><li>求排列先遍历背包</li><li>求排列组合数需要累加</li><li>01背包内层循环从后到前避免重复，完全背包从前往后遍历，因为可以重复取多次</li></ol><h2 id="周总结4" tabindex="-1">周总结4 <a class="header-anchor" href="#周总结4" aria-label="Permalink to &quot;周总结4&quot;">​</a></h2><h3 id="打家劫舍" tabindex="-1">打家劫舍 <a class="header-anchor" href="#打家劫舍" aria-label="Permalink to &quot;打家劫舍&quot;">​</a></h3><ol><li><p>dp[j] 表示打劫到第j家可以获得的最大金额</p></li><li><p>确定递推公式 可以选择偷或者不偷，不偷的话就表示前一家能偷，偷的话就要从前一家的前一家拿到当前的值，因为不能连偷两家。 <code>dp[j]=Math.max(dp[j-1],dp[j-2]+nums[i])</code></p></li><li><p>初始化 dispatchEvent dp[0]=nums[0] dp[1]=Math.max(nums[0],nums[1])</p></li><li><p>确定遍历顺序</p></li><li><p>举例推到dp数组</p></li></ol><h3 id="打家劫舍2" tabindex="-1">打家劫舍2 <a class="header-anchor" href="#打家劫舍2" aria-label="Permalink to &quot;打家劫舍2&quot;">​</a></h3><ul><li>数组变成换且不能连着偷</li><li>分情况讨论，偷第一间就不能偷最后一间，偷最后一间就不能偷第一间 <ol><li>偷第一间</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   dp[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">nums[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(nums[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],nums[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> ;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">len</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   dp[i]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">nums[i])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">   dp[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">nums[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(nums[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],nums[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> ;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">len</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   dp[i]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">nums[i])</span></span></code></pre></div><ol start="2"><li>偷最后一间</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">nums[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(num[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],nums[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">len;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    dp[i]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],dp[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">nums[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">nums[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">dp[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(num[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],nums[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">len;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    dp[i]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],dp[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">nums[i])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li>取两个中最大的 <code>dp =Math.max(dp1[len-2],dp2[len-1])</code></li></ol></li></ul><h3 id="打家劫舍3" tabindex="-1">打家劫舍3 <a class="header-anchor" href="#打家劫舍3" aria-label="Permalink to &quot;打家劫舍3&quot;">​</a></h3><ol><li>二叉树上打家劫舍 不能偷相邻的两个节点 <ul><li>可以使用记忆递归解决。</li></ul></li><li>dp数组含义：下标为0记录不偷该节点所得到的的最大金钱，下标为1记录偷该节点所得到的的最大金钱</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//偷父节点</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root.val</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">left[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">right[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">//偷左右子树不偷父节点</span></span>
<span class="line"><span style="color:#E1E4E8;">dp[i][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">left[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">right1[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//偷父节点</span></span>
<span class="line"><span style="color:#24292E;">dp[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.val</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">left[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">right[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">//偷左右子树不偷父节点</span></span>
<span class="line"><span style="color:#24292E;">dp[i][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">left[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">right1[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span></code></pre></div><h2 id="最长序列总结" tabindex="-1">最长序列总结 <a class="header-anchor" href="#最长序列总结" aria-label="Permalink to &quot;最长序列总结&quot;">​</a></h2><h3 id="最长递增子序列" tabindex="-1">最长递增子序列 <a class="header-anchor" href="#最长递增子序列" aria-label="Permalink to &quot;最长递增子序列&quot;">​</a></h3><ol><li>dp[i]表示以这个数结尾的最长上升子序列的长度</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//j是从0到i-1</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(nums[i]</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">nums[j]){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是递增的 又多了一个所以要+1</span></span>
<span class="line"><span style="color:#E1E4E8;">    dp[i]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(dp[i],dp[j]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//j是从0到i-1</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(nums[i]</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">nums[j]){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是递增的 又多了一个所以要+1</span></span>
<span class="line"><span style="color:#24292E;">    dp[i]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(dp[i],dp[j]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="最长递增子串" tabindex="-1">最长递增子串 <a class="header-anchor" href="#最长递增子串" aria-label="Permalink to &quot;最长递增子串&quot;">​</a></h3><h3 id="最长连续递增" tabindex="-1">最长连续递增 <a class="header-anchor" href="#最长连续递增" aria-label="Permalink to &quot;最长连续递增&quot;">​</a></h3><ol><li>因为是连续的所以 只要一层循环就够了</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(nums[i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">nums[i]){</span></span>
<span class="line"><span style="color:#E1E4E8;">    dp[i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dp[i]</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(nums[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">nums[i]){</span></span>
<span class="line"><span style="color:#24292E;">    dp[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dp[i]</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="最长重复子数组" tabindex="-1">最长重复子数组 <a class="header-anchor" href="#最长重复子数组" aria-label="Permalink to &quot;最长重复子数组&quot;">​</a></h3><h3 id="最长公共子序列" tabindex="-1">最长公共子序列 <a class="header-anchor" href="#最长公共子序列" aria-label="Permalink to &quot;最长公共子序列&quot;">​</a></h3><p>画个图</p><h3 id="不想交的线" tabindex="-1">不想交的线 <a class="header-anchor" href="#不想交的线" aria-label="Permalink to &quot;不想交的线&quot;">​</a></h3>`,88),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const A=s(p,[["render",c]]);export{h as __pageData,A as default};
