import{_ as t,o,c as r,Q as a}from"./chunks/framework.39f71bcb.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/实习总结/需求.md","filePath":"pages/Earnings/实习总结/需求.md"}'),e={name:"pages/Earnings/实习总结/需求.md"},i=a('<h2 id="收车页" tabindex="-1">收车页 <a class="header-anchor" href="#收车页" aria-label="Permalink to &quot;收车页&quot;">​</a></h2><ul><li>时间：22.05.18</li><li>地址：git@git.xiaojukeji.com:native-fe/driver-offline-page.git</li><li>总结：这是入职的第一个需求，当时电脑还没到就接到了需求，也是有点小激动。其实就是一个H5页面，涉及到背景，导航，签到的组件等。刚拿到有点懵，之前没有做过移动端的开发，所以对怎么适配还是一头雾水，查了很多资料，周四拿到电脑，周末也都在写，最后用了<strong>postcss插件里的pxtorem</strong>，在这里用的时候原理也不太清楚，后来跟陈悦讨论才搞明白了到底是什么原理。页面写的非常之乱，样式用的<strong>stylus</strong> 这个还是简化了样式的写法，但是自己用的不是特别熟，就跟抹蛋糕一样修修补补的，十分难看，也有很多重复的代码。<strong>签到页</strong>的实现也是有店没有思路去参考了下别人的代码。样式的写法,这种可选择可判断的之前没用过。<code>class={box:item.ishow===0.futre:item.length&gt;0}</code></li></ul><h2 id="卖车-交易链路-验车单" tabindex="-1">卖车/交易链路/验车单 <a class="header-anchor" href="#卖车-交易链路-验车单" aria-label="Permalink to &quot;卖车/交易链路/验车单&quot;">​</a></h2><ul><li>时间：22.5.23</li><li>地址：git@git.xiaojukeji.com:driver-fe/car-mall.git</li><li>总结：收车页还有很多问题但是当时让我换了我就来卖车了，是和志远一起开发，看着页面很多，心里也有点害怕。当时也要了几个感觉不是太复杂的页面，因为也怕完不成，就开始画UI，知道魔方可以复制样式之后很多就直接复制过去再修修补补，也是像抹油漆一样。有点丑陋</li></ul><blockquote><p>远哥 6.9 发现一些点你可以注意一下哈： 1、我看有些都是使用的绝对布局的，我有的改成flex布局了，感觉你后面如果可以的话 可以优先考虑flex布局； 2、底部弹出组件，是否可以直接在popup组件的基础上二次封装； 我看你是直接自己写的一个组件吧； 3、order-detail-mock文件里面的orderStatus和financePlanStatus的修改 可以返回不同的卡片</p></blockquote><ol><li>第一阶段：ordersttus 两个数自控制返回<strong>页面卡片状态</strong>，<strong>switch 这个语法好像在JS里用的很少但后续其实可以用到</strong>这个时候对卖车的状态也是糊里糊涂的，因为prd里的流程没有认证过，只看了UI图去摸索，后来自己画了个思维导图理流程才搞清楚了整理流程。后面发现其实prd里也写很清楚，当时应该仔细看看的，就节省很多时间在理流程上面。不过页面里的逻辑基本上理顺了，其实就是要根据不同的接口数据去控制页面样式等等的改变，特别是<strong>验车页面 有5步</strong>要去控制各个状态的变化<code>其实就是在一个for循环里对不同的item属性进行判断要不要展示当前的对应数据是</code>。</li><li>第二阶段：通过一个接口，整理都在一个状态卡片里面，通过status状态码 <strong>switch case</strong> 通过<strong>v-if</strong>展示对应的卡片。因为module会返回所有的的状态要一起返回，所以要用find处理对应状态是active的。遇到<strong>更多</strong>按钮的问题，主要是转原生之后渲染的问题，而且不支持z-index，发现租车里有可以用用的组件，根据优先级展示对应按钮，通过computed计算需要弹出的位置（document.get获取到更多距离顶部的位置，然后减去对应需要弹出按钮框的长度） 后续的mock数据是文强做了一个封装,根据请求的字段去匹配对应的mock数据，实现了mock开关可以控制是否用mock数据。</li><li>验车单：写这个验车单的时候，因为也在卖车其他页吸取了一些经验，所以整体感觉更顺畅一些。其实就是一个tab列表，对应的切换方式有两种，一种就是tab标签切换，还可以通过锚点点击切换，<strong>吸顶</strong>效果的实现（监听他的滑动事件，卡片到顶部的距离如果小于这个导航栏的高度就采用吸顶的UI，隐藏之前的导航栏）比之前顺畅很多，写了也更有成就感。就是还没有介入接口数据。参与会议的时候也提出了<strong>存在歧义</strong>的地方，这个页面是<strong>电梯</strong>的那种长列表还是tab页，后面验证是tab，因为楼层更难，还要去计算偏移位置。后面可以自己做楼层的试试看，怎么才能实现电梯层楼页面的转换。 高度组件化，尽量兼容多种场景</li></ol><h2 id="退押优化-上线" tabindex="-1">退押优化（上线） <a class="header-anchor" href="#退押优化-上线" aria-label="Permalink to &quot;退押优化（上线）&quot;">​</a></h2><ul><li>时间：22.7</li><li>地址：git@git.xiaojukeji.com:cf-terminal/rent/manto-rentcar.git</li><li>总结：这是接手别人的项目，不用从头开始写就是先<strong>找准位置和读懂代码</strong>，也有些功能上跟prd不一样的地方当时没注意到后面就是测试发现了让改一下，后面接手别人的项目要<strong>多看下prd</strong>。还要注意不要修改别人之前的逻辑<strong>改动不要超过prd</strong>，那个入口多改了一个地方果然就在不该显示的地方显示了。遇到这种先调试的时候抓包抓到之前的接口数据（也是在这知道咋用Charles了），看下加的字段在哪个层级，再去细化逻辑。也可以先代理了接口去修改成新的接口数据看下效果。新页面的组件是别人差不多写好了，就是有些细节还要改，比如单选变成多选，还有对软键盘的隐藏（通过控制失焦实现），有些组件无法实现比如placeholder要灵活去实现，比如用个绝对定位的实现。<strong>这里用一个组件通过type区分现实的样式</strong>能够很容易和UI对起来，以后自己开发也可以用这样的方法去封装组件。<strong>选择图片</strong> 也是后来出bug的地方，第一个问题就是一次会加两个图片，逻辑有点问题，第二个问题就是bridge方法调的时候的提示问题，<strong>trycatch</strong>可以实现端内提示，但是安卓IOS不对齐的问题还没解决，因我对我Bridge方法就是一个黑盒，里面的原理还不太清楚，后面需要修改Bridge方法才可以。这里还要注意用IOS和安卓都要测试下界面显示，因为这里的电话号码就出了点问题。这个主要是上线的时候遇到的大问题，<strong>跟反作弊代码写在一个分支</strong>，上线的时候一定要好好检查,带到线上出了大问题！！一定要谨记！！！thanos的请求接口的预发环境是在手机上切换的，代码里改不了，IOS有能直接改，安卓只能用代理。这个当时调试的时候orderID写了又删除非常麻烦，可以考虑做个判断，没有的时候就用测试订单号，不然注来注去非常麻烦。 上线流程补下：</li></ul><blockquote><p>（测试平台获取测试包）<br> 1. 上线前更新版本号（拉取最新主干） +1<br> 2. CR修改。 3. 合并主干 部署<br> 4.上线单 执行部署 5. thanos平台放量 （四个卡片，通过=》白名单测试=〉放量100） 之前有卡片没放量/回滚会影响之后发布 最后回到oe点下上线</p></blockquote><p>0.5 调试太难了，本地起了好久都有问题，主要是测试环境的问题，其实把config里的测试地址直接改了的思路是没问题的。后面直接用本地JS文件代理了，其实CSS直接代理也可以。跳转页面的传参,处理嵌套的数组首先用了<strong>数组拍平</strong>，之后传参要用<strong>JSON.Stringify encodeURL(array)</strong> 但是这里跳过去之后样式出了点问题，后面可以直接右键<strong>edit as HTML</strong>修改了看效果。发现价格处理的问题，原来utils里有对应的处理函数，<strong>格式化数据</strong>（CR中提出对空值做下判断，确定不为空再格式化）都是以分为单位。 只能线上测试，风险有点大。</p><blockquote><ol><li>oe 直接发布 2. odin上线单 oe最后点下上线</li></ol></blockquote><h2 id="埋点" tabindex="-1">埋点 <a class="header-anchor" href="#埋点" aria-label="Permalink to &quot;埋点&quot;">​</a></h2><p>这个项目是第一次去做埋点，用了项目里封装好的埋点方法，需要<strong>动脑子</strong>去看方法是怎么实现的，不能无脑套用，无脑套用就没理解本来别人的埋点参数就带了哪些，共参里面有哪些。注意看下别人的埋点逻辑。埋点埋完去<strong>omega平台</strong>点下开发完,不然平台上检测不到。</p><h2 id="反作弊弹窗" tabindex="-1">反作弊弹窗 <a class="header-anchor" href="#反作弊弹窗" aria-label="Permalink to &quot;反作弊弹窗&quot;">​</a></h2><ul><li>时间：2022.7</li><li>地址：git@git.xiaojukeji.com:cf-terminal/rent/manto-rentcar.git</li><li>总结：这个就是加了个弹窗但是之前不小心带上线了。用了封装好的alert,直接写对应接受和拒绝的回调就行了，主要是连调一直没通，注意调试的时候需要发<strong>curl</strong> 注意⚠️<strong>不要随便增加参数</strong>，当时调不通试图增加CityID但是涉及到可能有隐私问题，所以最好不要随便加！上线就是thanos的上线流程。</li></ul><h2 id="商家自交付优化" tabindex="-1">商家自交付优化 <a class="header-anchor" href="#商家自交付优化" aria-label="Permalink to &quot;商家自交付优化&quot;">​</a></h2><ul><li>时间：2022.8</li><li>地址：</li><li>总结：</li></ul><h2 id="charles" tabindex="-1">Charles <a class="header-anchor" href="#charles" aria-label="Permalink to &quot;Charles&quot;">​</a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><ol><li>连一个wifi</li><li>手机安装证书</li><li>proxysetting 端口号 + IP</li><li>手机设置wifi代理为手动 填入电脑的端口号和IP</li></ol>',20),l=[i];function n(s,g,c,d,h,u){return o(),r("div",null,l)}const f=t(e,[["render",n]]);export{p as __pageData,f as default};
