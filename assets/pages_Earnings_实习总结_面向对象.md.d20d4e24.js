import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.f16e6129.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/实习总结/面向对象.md","filePath":"pages/Earnings/实习总结/面向对象.md"}'),r={name:"pages/Earnings/实习总结/面向对象.md"},p=o(`<h2 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h2><ul><li>继承 封装 多态</li></ul><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><pre><code>模拟类：JS本身是没有class类型的，但是每个函数都有一个prototype属性。prototype指向一个对象，当函数作为构造函数时，prototype则起到类似class的作用
实现继承：实现继承的方式依靠原型链完成，基本思想就是利用原型让一个引用类型继承另一个引用类型的属性和方法。两个对象之间实现了继承，而这种继承方式是通过创建SuperType的实例并将该实例赋给subType.prototype实现的，本质就是重写了原型对象。
</code></pre><ol><li>利用原型让一个引用类型继承另一个引用类型的属性和方法，两个对象之间实现了继承，这种继承方式通过创建SuperType实例并将该实例赋给subTYpe。prototype，本质就是重写了原型对象</li></ol><h2 id="原型-原型链" tabindex="-1">原型 原型链 <a class="header-anchor" href="#原型-原型链" aria-label="Permalink to &quot;原型 原型链&quot;">​</a></h2><ol><li>prototype 属性指向一个对象，这个对象是调用该构造函数创建的实例原型。</li><li>原型：每个javasript对象在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每个对象都会从原型继承属性。 Object.prototype表示实例原型。</li><li>每个原型都有一个constructor属性指向关联的构造函数。 __proto__每个对象都有的隐式属性，指向该对象的原型。</li><li>通过构造函数生成的实例都是对象，类的实例也是对象，实例对象的[prototype]属性指向的是其构造函数的prototype</li></ol>`,7),i=[p];function l(s,n,_,c,d,h){return t(),a("div",null,i)}const y=e(r,[["render",l]]);export{m as __pageData,y as default};
