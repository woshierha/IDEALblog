import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.f16e6129.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/深入理解ES6/函数.md","filePath":"pages/Earnings/深入理解ES6/函数.md"}'),p={name:"pages/Earnings/深入理解ES6/函数.md"},o=l(`<h2 id="参数默认值" tabindex="-1">参数默认值 <a class="header-anchor" href="#参数默认值" aria-label="Permalink to &quot;参数默认值&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeout</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(type </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">timeout</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//用typeof 检测参数类型</span></span>
<span class="line"><span style="color:#6A737D;">//timeout = timeout || 2000; 这种在0的时候会认为是假肢取右边</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ES6 默认值</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makerequest</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">timeout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">=function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//默认url是必须的  其他两个参数是可选的</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(type </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">timeout</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//用typeof 检测参数类型</span></span>
<span class="line"><span style="color:#6A737D;">//timeout = timeout || 2000; 这种在0的时候会认为是假肢取右边</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ES6 默认值</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makerequest</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">,</span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">callback</span><span style="color:#D73A49;">=function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//默认url是必须的  其他两个参数是可选的</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><ul><li>要点：1.Rest剩余参数(合并) 2.扩展运算符(浅拷贝) 3. 箭头函数</li><li>启发点： <ol><li>参数默认值也可以是函数(只有再没传入参数才会使用默认值)</li><li>参数也有跟let const 一样的暂时性死区，在初始化之前不允许被访问</li><li>rest 剩余参数(...arguments) 表示第一个参数之后参数 ，<strong>后面不能再有其他参数</strong> setter只能用于单个参数，所以也不能使用，多个参数合并到数组中</li><li>扩展运算符，允许将一个数组分割为独立参数传递,<strong>后面可以继续传其他参数</strong></li></ol></li><li>总结：ES6函数最大的改变就是引入了箭头函数，同时块级函数不再是错误</li></ul><h2 id="arguments对象" tabindex="-1">arguments对象 <a class="header-anchor" href="#arguments对象" aria-label="Permalink to &quot;arguments对象&quot;">​</a></h2><p>ES6</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mixArgs</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">first</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">second</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">{ console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(first </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(second </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">; second </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;d&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(first </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(second </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mixArgs</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//只传了一个参数，所以Argumens的长度是1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//aruments[1]是undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mixArgs</span><span style="color:#24292E;">(</span><span style="color:#E36209;">first</span><span style="color:#24292E;">, </span><span style="color:#E36209;">second</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">{ console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(first </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(second </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">; second </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(first </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(second </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mixArgs</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//只传了一个参数，所以Argumens的长度是1</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//aruments[1]是undefined</span></span></code></pre></div><h2 id="扩展运算符-拆解" tabindex="-1">扩展运算符(拆解) <a class="header-anchor" href="#扩展运算符-拆解" aria-label="Permalink to &quot;扩展运算符(拆解)&quot;">​</a></h2><ol><li>拆解字符串和数组</li><li>拷贝数组和对象(浅拷贝)</li><li>类数组转换为数组</li></ol><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h2><ol><li>没有 this,super，aruments,没有new target，他的this,super和args由离他最近的非箭头函数决定</li><li>构造函数没有[[construct]]方法 不能被new调用</li><li>没有原型，没有prototype属性</li><li>不能更改this</li><li>没有aruguments绑定，只能根据具名参数或者剩余参数访问</li><li>不能有重复的具名参数，箭头函数也有name</li><li>单个参数不用写() 只有一个语句不用写return</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTempitem</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">({id:id,name:</span><span style="color:#9ECBFF;">&#39;temp&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">//返回对象的时候要用用圆括号</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTempitem</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">({id:id,name:</span><span style="color:#032F62;">&#39;temp&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">//返回对象的时候要用用圆括号</span></span></code></pre></div><h2 id="iife" tabindex="-1">IIFE <a class="header-anchor" href="#iife" aria-label="Permalink to &quot;IIFE&quot;">​</a></h2><ul><li>普通函数 ( function() {} ) () / ( function(){} () )</li><li>箭头函数 (()=&gt;{})() 只能这么写</li></ul><h2 id="实验" tabindex="-1">实验 <a class="header-anchor" href="#实验" aria-label="Permalink to &quot;实验&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mixArgs</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">first</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">second</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(first </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(second </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">    first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">; second </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;d&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//arguments对象会被更新反映出参数的变化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//first 和 second变量赋予新值的时候，arguments也就相应更新</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(first </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(second </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); }</span></span>
<span class="line"><span style="color:#B392F0;">mixArgs</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//默认值为函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1, 1)); // 2 </span></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1)); // 6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//前面参数作为后面参数的默认值</span></span>
<span class="line"><span style="color:#6A737D;">// function add(first, second = first) { return first + second; }</span></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1, 1)); // 2 </span></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1)); // 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">first</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">second</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(first))</span></span>
<span class="line"><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> second; }</span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//过程 let first =1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// let second=getvalue(first) //6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//模拟undersocre.js的pick 方法 能够返回包含原对象特定属性的子集副本</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//第一个参数是来源对象，第二个参数是需要拷贝的属性和名称</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//这个是不是还挺像obj.definedproperty 需要知道对象的每个属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//     let bookData = pick(book, &quot;author&quot;, &quot;year&quot;); </span></span>
<span class="line"><span style="color:#6A737D;">//     console.log(bookData.author); // &quot;Nicholas C. Zakas&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//    console.log(bookData.year); // 2015</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  function pick(object) { </span></span>
<span class="line"><span style="color:#6A737D;">//     let result = Object.create(null); </span></span>
<span class="line"><span style="color:#6A737D;">//     // 从第二个参数开始处理 </span></span>
<span class="line"><span style="color:#6A737D;">//     for (let i = 1, len = arguments.length; i &lt; len; i++) </span></span>
<span class="line"><span style="color:#6A737D;">//     { result[arguments[i]] = object[arguments[i]]; }</span></span>
<span class="line"><span style="color:#6A737D;">//     return result; }</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pick</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">object</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//剩余参数必须被放在参数列表最后</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  keys表示的是剩余参数，不用从第二个开始</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keys.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    { result[keys[i]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> object[keys[i]]; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    title: </span><span style="color:#9ECBFF;">&quot;Understanding ES6&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    author: </span><span style="color:#9ECBFF;">&quot;Nicholas C. Zakas&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    year: </span><span style="color:#79B8FF;">2015</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bookData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pick</span><span style="color:#E1E4E8;">(book, </span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;year&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(bookData.author); </span><span style="color:#6A737D;">// &quot;Nicholas C. Zakas&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(bookData.year); </span><span style="color:#6A737D;">// 2015</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//剩余参数和arguments一起用</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">//a</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">//a</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//函数构造器  所有参数都是字符串</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> pickfirst </span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...args&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;return args[1]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pickfirst</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//扩展运算符</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">58</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">878</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">value)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr1</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr2</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">arr1,</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">arr2])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    name:</span><span style="color:#9ECBFF;">&#39;wee&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    age:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    sex:</span><span style="color:#9ECBFF;">&#39;female&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    aee:{</span></span>
<span class="line"><span style="color:#E1E4E8;">       a1: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> person </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">obj}</span></span>
<span class="line"><span style="color:#E1E4E8;">person.aee.a1</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">21</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">//浅拷贝</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mixArgs</span><span style="color:#24292E;">(</span><span style="color:#E36209;">first</span><span style="color:#24292E;">, </span><span style="color:#E36209;">second</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(first </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(second </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">    first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">; second </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//arguments对象会被更新反映出参数的变化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//first 和 second变量赋予新值的时候，arguments也就相应更新</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(first </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(second </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); }</span></span>
<span class="line"><span style="color:#6F42C1;">mixArgs</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//默认值为函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">{ </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1, 1)); // 2 </span></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1)); // 6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//前面参数作为后面参数的默认值</span></span>
<span class="line"><span style="color:#6A737D;">// function add(first, second = first) { return first + second; }</span></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1, 1)); // 2 </span></span>
<span class="line"><span style="color:#6A737D;">// console.log(add(1)); // 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">first</span><span style="color:#24292E;">, </span><span style="color:#E36209;">second</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(first))</span></span>
<span class="line"><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> second; }</span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//过程 let first =1</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// let second=getvalue(first) //6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//模拟undersocre.js的pick 方法 能够返回包含原对象特定属性的子集副本</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//第一个参数是来源对象，第二个参数是需要拷贝的属性和名称</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//这个是不是还挺像obj.definedproperty 需要知道对象的每个属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//     let bookData = pick(book, &quot;author&quot;, &quot;year&quot;); </span></span>
<span class="line"><span style="color:#6A737D;">//     console.log(bookData.author); // &quot;Nicholas C. Zakas&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//    console.log(bookData.year); // 2015</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//  function pick(object) { </span></span>
<span class="line"><span style="color:#6A737D;">//     let result = Object.create(null); </span></span>
<span class="line"><span style="color:#6A737D;">//     // 从第二个参数开始处理 </span></span>
<span class="line"><span style="color:#6A737D;">//     for (let i = 1, len = arguments.length; i &lt; len; i++) </span></span>
<span class="line"><span style="color:#6A737D;">//     { result[arguments[i]] = object[arguments[i]]; }</span></span>
<span class="line"><span style="color:#6A737D;">//     return result; }</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pick</span><span style="color:#24292E;">(</span><span style="color:#E36209;">object</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">keys</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//剩余参数必须被放在参数列表最后</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//  keys表示的是剩余参数，不用从第二个开始</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keys.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    { result[keys[i]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> object[keys[i]]; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    title: </span><span style="color:#032F62;">&quot;Understanding ES6&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    author: </span><span style="color:#032F62;">&quot;Nicholas C. Zakas&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    year: </span><span style="color:#005CC5;">2015</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bookData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pick</span><span style="color:#24292E;">(book, </span><span style="color:#032F62;">&quot;author&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;year&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(bookData.author); </span><span style="color:#6A737D;">// &quot;Nicholas C. Zakas&quot;</span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(bookData.year); </span><span style="color:#6A737D;">// 2015</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//剩余参数和arguments一起用</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">//a</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">//a</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//函数构造器  所有参数都是字符串</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pickfirst </span><span style="color:#D73A49;">=new</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...args&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;return args[1]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pickfirst</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//扩展运算符</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">58</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">878</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">value)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr1,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr2])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    name:</span><span style="color:#032F62;">&#39;wee&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    sex:</span><span style="color:#032F62;">&#39;female&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    aee:{</span></span>
<span class="line"><span style="color:#24292E;">       a1: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">obj}</span></span>
<span class="line"><span style="color:#24292E;">person.aee.a1</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">21</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">//浅拷贝</span></span></code></pre></div>`,15),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{A as __pageData,g as default};
