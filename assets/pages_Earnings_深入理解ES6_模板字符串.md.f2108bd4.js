import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.464c1bfb.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/深入理解ES6/模板字符串.md","filePath":"pages/Earnings/深入理解ES6/模板字符串.md"}'),o={name:"pages/Earnings/深入理解ES6/模板字符串.md"},p=l('<h2 id="制造替换位" tabindex="-1">制造替换位 <a class="header-anchor" href="#制造替换位" aria-label="Permalink to &quot;制造替换位&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, price </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.25</span><span style="color:#E1E4E8;">, message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} items cost $${</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">price</span><span style="color:#9ECBFF;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}.`</span><span style="color:#E1E4E8;">; console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(message); </span><span style="color:#6A737D;">// &quot;10 items cost $2.50.&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, price </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.25</span><span style="color:#24292E;">, message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`${</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} items cost $${</span><span style="color:#032F62;">(</span><span style="color:#24292E;">count</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#24292E;">price</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">2</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}.`</span><span style="color:#24292E;">; console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(message); </span><span style="color:#6A737D;">// &quot;10 items cost $2.50.&quot;</span></span></code></pre></div><p>替换位是js表达式,可以嵌入计算，函数调用等操作</p><p>可嵌入另一个模板字面连内部</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Nicholas&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">message </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">`hello,${`my name is${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}`},`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">//&quot;hello my name is Nicoholas&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Nicholas&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">message </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">`hello,${`my name is${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}`},`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#6A737D;">//&quot;hello my name is Nicoholas&quot;</span></span></code></pre></div><h2 id="标签化模板" tabindex="-1">标签化模板 <a class="header-anchor" href="#标签化模板" aria-label="Permalink to &quot;标签化模板&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#9ECBFF;">`Hello world`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">//标签 tag是一个函数，被调用时接受需要处理的模板字面量数据，</span></span>\n<span class="line"><span style="color:#6A737D;">//第一个参数是数组，随后参数是每个替换位的解释zhi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#032F62;">`Hello world`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#6A737D;">//标签 tag是一个函数，被调用时接受需要处理的模板字面量数据，</span></span>\n<span class="line"><span style="color:#6A737D;">//第一个参数是数组，随后参数是每个替换位的解释zhi</span></span></code></pre></div><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// let name=&quot;Nicholas&quot;,</span></span>\n<span class="line"><span style="color:#6A737D;">// message =`hello,${`my name is ${name}`},`;</span></span>\n<span class="line"><span style="color:#6A737D;">// console.log(message)//hello,my name is Nicholas,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, price </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.25</span><span style="color:#E1E4E8;">, </span></span>\n<span class="line"><span style="color:#E1E4E8;">message </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">passthru</span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} items cost $${</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">price</span><span style="color:#9ECBFF;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}.`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passthru</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">literals</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">substitutions</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">; </span></span>\n<span class="line"><span style="color:#6A737D;">// 仅使用 substitution 的元素数量来进行循环 </span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> substitutions.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> literals[i]; result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> substitutions[i]; }</span></span>\n<span class="line"><span style="color:#6A737D;">// 添加最后一个字面量 </span></span>\n<span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> literals[literals.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]; </span></span>\n<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; }</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(message)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// let name=&quot;Nicholas&quot;,</span></span>\n<span class="line"><span style="color:#6A737D;">// message =`hello,${`my name is ${name}`},`;</span></span>\n<span class="line"><span style="color:#6A737D;">// console.log(message)//hello,my name is Nicholas,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, price </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.25</span><span style="color:#24292E;">, </span></span>\n<span class="line"><span style="color:#24292E;">message </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">passthru</span><span style="color:#032F62;">`${</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} items cost $${</span><span style="color:#032F62;">(</span><span style="color:#24292E;">count</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#24292E;">price</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">2</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}.`</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">passthru</span><span style="color:#24292E;">(</span><span style="color:#E36209;">literals</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">substitutions</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">; </span></span>\n<span class="line"><span style="color:#6A737D;">// 仅使用 substitution 的元素数量来进行循环 </span></span>\n<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> substitutions.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> literals[i]; result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> substitutions[i]; }</span></span>\n<span class="line"><span style="color:#6A737D;">// 添加最后一个字面量 </span></span>\n<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> literals[literals.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]; </span></span>\n<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; }</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(message)</span></span></code></pre></div>',9),e=[p];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{d as __pageData,h as default};
