import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.464c1bfb.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/Earnings/深入理解ES6/混入.md","filePath":"pages/Earnings/深入理解ES6/混入.md"}'),p={name:"pages/Earnings/深入理解ES6/混入.md"},e=l(`<h2 id="object-assign" tabindex="-1">object.assign <a class="header-anchor" href="#object-assign" aria-label="Permalink to &quot;object.assign&quot;">​</a></h2><ol><li>在supplier上面进行迭代，并将属性赋值给Reciver，是浅拷贝</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mixin</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">reciver</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">supplier</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(supplier).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fuction</span><span style="color:#E1E4E8;">(key)){</span></span>
<span class="line"><span style="color:#E1E4E8;">        recevier[key]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">supplier[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> recevier</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mixin</span><span style="color:#24292E;">(</span><span style="color:#E36209;">reciver</span><span style="color:#24292E;">,</span><span style="color:#E36209;">supplier</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(supplier).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fuction</span><span style="color:#24292E;">(key)){</span></span>
<span class="line"><span style="color:#24292E;">        recevier[key]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">supplier[key]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> recevier</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>super = Object.getPrototypeOf(this)</li></ol><ul><li>只能在方法中调用，可以调用对象原型上的方法，所调用方法会被设置好其内部的this绑定</li></ul><ol start="3"><li><p>Object.create() //使用现有的对象来提供新创建的对象的__proto__。</p></li><li><p>Obejct.is(a,b)严格判断是否相等</p></li></ol><h2 id="super" tabindex="-1">super <a class="header-anchor" href="#super" aria-label="Permalink to &quot;super&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> person </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getGreeting</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> friend </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getGreeting</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getGreeting</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;hi&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">setPrototypeOf</span><span style="color:#E1E4E8;">(friend,person)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;">	relative	</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">	Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(friend);</span></span>
<span class="line"><span style="color:#6A737D;">//使用现有的对象来提供新创建的对象的__proto__。 </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(person.</span><span style="color:#B392F0;">getGreeting</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(friend.</span><span style="color:#B392F0;">getGreeting</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(relative.</span><span style="color:#B392F0;">getGreeting</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getGreeting</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello!&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> friend </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getGreeting</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getGreeting</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;hi&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">setPrototypeOf</span><span style="color:#24292E;">(friend,person)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;">	relative	</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">	Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(friend);</span></span>
<span class="line"><span style="color:#6A737D;">//使用现有的对象来提供新创建的对象的__proto__。 </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(person.</span><span style="color:#6F42C1;">getGreeting</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(friend.</span><span style="color:#6F42C1;">getGreeting</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(relative.</span><span style="color:#6F42C1;">getGreeting</span><span style="color:#24292E;">());</span></span></code></pre></div>`,8),o=[e];function t(c,r,E,y,i,g){return n(),a("div",null,o)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
